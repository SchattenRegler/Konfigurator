# Dieses Workflow nutzt teils Drittanbieter-Actions (nicht von GitHub zertifiziert).

name: Flutter – Web, Linux, macOS, Windows

on:
  push:
    branches: ["main"]
    tags:
      - "v*.*.*"   # <- Tag-Push triggert den Release-Job
  pull_request:
    branches: ["main"]

permissions:
  contents: write   # nötig für Release erstellen
  pages: write      # nötig für GitHub Pages Deployment
  id-token: write   # nötig für GitHub Pages Deployment

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
          - os: macos-latest
            os_name: macOS
          - os: windows-latest
            os_name: Windows

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      # --- Betriebssystemspezifische Dependencies ---
      - name: Install desktop deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Install desktop deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja || true

      - name: Install desktop deps (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install ninja -y

      # --- Flutter vorbereiten & Abhängigkeiten holen ---
      - name: Enable desktop targets
        run: |
          flutter config --enable-linux-desktop
          flutter config --enable-macos-desktop
          flutter config --enable-windows-desktop

      - name: Flutter pub get
        run: flutter pub get

      # --- Builds ---
      # Web nur einmal auf Linux bauen (spart Zeit/Runner-Minuten)
      - name: Build Web (Linux only)
        if: runner.os == 'Linux'
        run: flutter build web --release --base-href /

      - name: Upload GitHub Pages artifact
        if: runner.os == 'Linux'
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

      - name: Build Linux
        if: runner.os == 'Linux'
        run: flutter build linux --release

      - name: Build macOS
        if: runner.os == 'macOS'
        run: flutter build macos --release

      - name: Build Windows
        if: runner.os == 'Windows'
        shell: bash
        run: flutter build windows --release

      # --- Packen der Artefakte ---
      - name: Package Linux bundle
        if: runner.os == 'Linux'
        run: |
          tar -czf app-linux.tar.gz -C build/linux/x64/release bundle
          tar -czf web-build.tar.gz -C build web

      - name: Package macOS .app
        if: runner.os == 'macOS'
        run: |
          cd build/macos/Build/Products/Release
          # zippe alle erzeugten .app Bundles
          for app in *.app; do
            [ -e "$app" ] || continue
            ditto -c -k --sequesterRsrc --keepParent "$app" "$app.zip"
          done
          ls -la

      - name: Package Windows runner
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $outDir = "build/windows/x64/runner/Release"
          if (!(Test-Path $outDir)) { $outDir = "build/windows/x64/runner/Release" }
          Compress-Archive -Path "$outDir/*" -DestinationPath "app-windows.zip"

      # --- Upload Artefakte ---
      - name: Upload Linux artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: app-linux
          path: app-linux.tar.gz
          if-no-files-found: error
          retention-days: 30

      - name: Upload Web artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web-build.tar.gz
          if-no-files-found: error
          retention-days: 30

      - name: Upload macOS artifact(s)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: app-macos
          path: build/macos/Build/Products/Release/*.app.zip
          if-no-files-found: error
          retention-days: 30

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: app-windows
          path: app-windows.zip
          if-no-files-found: error
          retention-days: 30

  release:
    name: Publish GitHub Release (on tag)
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Show downloaded files (debug)
        run: |
          ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-pages:
    name: Deploy GitHub Pages (main branch)
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
